25a26,28
> #include <message_filters/subscriber.h>
> #include <message_filters/synchronizer.h>
> #include <message_filters/sync_policies/approximate_time.h>
59c62
< friend class LaneSelectTestClass;
---
>   friend class LaneSelectTestClass;
63d65
<   ~LaneSelectNode();
74a77
>   ros::Timer timer_;
77c80,85
<   ros::Subscriber sub1_, sub2_, sub3_, sub4_, sub5_, sub6_;
---
>   ros::Subscriber sub1_, sub5_, sub6_;
>   message_filters::Subscriber<geometry_msgs::PoseStamped> sub2_;
>   message_filters::Subscriber<geometry_msgs::TwistStamped> sub3_;
>   using PoseTwistSyncPolicy = message_filters::sync_policies::ApproximateTime<geometry_msgs::PoseStamped, geometry_msgs::TwistStamped>;
>   using PoseTwistSync = message_filters::Synchronizer<PoseTwistSyncPolicy>;
>   std::shared_ptr<PoseTwistSync> pose_twist_sync_;
81c89
<   int32_t current_lane_idx_;  // the index of the lane we are driving
---
>   int32_t current_lane_idx_, prev_lane_idx_;
84,88c92,106
<   std::vector<std::tuple<autoware_msgs::Lane, int32_t, ChangeFlag>> tuple_vec_;  // lane, closest_waypoint,
<                                                                                  // change_flag
<   std::tuple<autoware_msgs::Lane, int32_t, ChangeFlag> lane_for_change_;
<   bool is_lane_array_subscribed_, is_current_pose_subscribed_, is_current_velocity_subscribed_,
<       is_current_state_subscribed_, is_config_subscribed_;
---
>   bool is_new_lane_array_;
> 
>   using LaneTuple = std::tuple<autoware_msgs::Lane, int32_t, ChangeFlag>;
>   // Hold lane array information subscribed from /traffic_waypoints_array
>   // order: lane, closes_waypoint on the lane to ego-vehicle, lane change flag
>   std::vector<LaneTuple> tuple_vec_;
> 
>   // Hold lane information used in CHANGE_LANE state.
>   LaneTuple lane_for_change_;
> 
>   bool is_lane_array_subscribed_;
>   bool is_current_pose_subscribed_;
>   bool is_current_velocity_subscribed_;
>   bool is_current_state_subscribed_;
>   bool is_config_subscribed_;
91,92c109,113
<   double distance_threshold_, lane_change_interval_, lane_change_target_ratio_, lane_change_target_minimum_,
<       vlength_hermite_curve_;
---
>   double distance_threshold_;
>   double lane_change_interval_;
>   double lane_change_target_ratio_;
>   double lane_change_target_minimum_;
>   double vlength_hermite_curve_;
98a120
>   double update_rate_;
102,103d123
<   void callbackFromPoseStamped(const geometry_msgs::PoseStampedConstPtr& msg);
<   void callbackFromTwistStamped(const geometry_msgs::TwistStampedConstPtr& msg);
106a127,128
>   void callbackFromPoseTwistStamped(const geometry_msgs::PoseStampedConstPtr& pose_msg,
>                                     const geometry_msgs::TwistStampedConstPtr& twist_msg);
110d131
<   void initForLaneSelect();
124c145
<   void processing();
---
>   void processing(const ros::TimerEvent& e);
126d146
<   void publishLaneID(const autoware_msgs::Lane& lane);
130c150
<   bool getClosestWaypointNumberForEachLanes();
---
>   bool updateClosestWaypointNumberForEachLane();
160c180
< }
---
> }  // namespace lane_planner
