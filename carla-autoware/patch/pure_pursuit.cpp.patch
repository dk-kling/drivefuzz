17a18
> #include <cmath>
21,38c22,29
< // Constructor
< PurePursuit::PurePursuit()
<   : RADIUS_MAX_(9e10)
<   , KAPPA_MIN_(1 / RADIUS_MAX_)
<   , is_linear_interpolation_(false)
<   , next_waypoint_number_(-1)
<   , lookahead_distance_(0)
<   , minimum_lookahead_distance_(6)
<   , current_linear_velocity_(0)
< {
< }
< 
< // Destructor
< PurePursuit::~PurePursuit()
< {
< }
< 
< double PurePursuit::calcCurvature(geometry_msgs::Point target) const
---
> // Simple estimation of curvature given two points.
> // 1. Convert the target point from map frame into the current pose frame,
> //    so it has a local coorinates of (pt.x, pt.y, pt.z).
> // 2. If we think it is a cirle with a curvature kappa passing the two points,
> //    kappa = 2 * pt.y / (pt.x * pt.x + pt.y * pt.y). For detailed derivation, please
> //    refer to "Integrated Mobile Robot Control" by Omead Amidi
> //    (CMU-RI-TR-90-17, Equation 3.10 on Page 21)
> double PurePursuit::calcCurvature(const geometry_msgs::Point& target) const
41,44c32,35
<   double denominator = pow(getPlaneDistance(target, current_pose_.position), 2);
<   double numerator = 2 * calcRelativeCoordinate(target, current_pose_).y;
< 
<   if (denominator != 0)
---
>   geometry_msgs::Point pt = calcRelativeCoordinate(target, current_pose_);
>   double denominator = pt.x * pt.x + pt.y * pt.y;
>   double numerator = 2.0 * pt.y;
>   if (denominator != 0.0)
50,57c41
<     if (numerator > 0)
<     {
<       kappa = KAPPA_MIN_;
<     }
<     else
<     {
<       kappa = -KAPPA_MIN_;
<     }
---
>     kappa = numerator > 0.0 ? KAPPA_MIN_ : -KAPPA_MIN_;
59c43
<   ROS_INFO("kappa : %lf", kappa);
---
> 
67,68d50
<   constexpr double ERROR = pow(10, -5);  // 0.00001
< 
72c54
<     *next_target = current_waypoints_.at(next_waypoint).pose.pose.position;
---
>     *next_target = current_waypoints_.back().pose.pose.position;
76,107c58,59
<   geometry_msgs::Point zero_p;
<   geometry_msgs::Point end =
<     current_waypoints_.at(next_waypoint).pose.pose.position;
<   geometry_msgs::Point start =
<     current_waypoints_.at(next_waypoint - 1).pose.pose.position;
< 
<   // let the linear equation be "ax + by + c = 0"
<   // if there are two points (x1,y1) , (x2,y2),
<   // a = "y2-y1, b = "(-1) * x2 - x1" ,c = "(-1) * (y2-y1)x1 + (x2-x1)y1"
<   double a = 0;
<   double b = 0;
<   double c = 0;
<   double get_linear_flag = getLinearEquation(start, end, &a, &b, &c);
<   if (!get_linear_flag)
<     return false;
< 
<   // let the center of circle be "(x0,y0)", in my code ,
<   // the center of circle is vehicle position
<   // the distance  "d" between the foot of
<   // a perpendicular line and the center of circle is ...
<   //    | a * x0 + b * y0 + c |
<   // d = -------------------------------
<   //          âˆš( a~2 + b~2)
<   double d = getDistanceBetweenLineAndPoint(current_pose_.position, a, b, c);
< 
<   // ROS_INFO("a : %lf ", a);
<   // ROS_INFO("b : %lf ", b);
<   // ROS_INFO("c : %lf ", c);
<   // ROS_INFO("distance : %lf ", d);
< 
<   if (d > search_radius)
<     return false;
---
>   geometry_msgs::Point end = current_waypoints_.at(next_waypoint).pose.pose.position;
>   geometry_msgs::Point start = current_waypoints_.at(next_waypoint - 1).pose.pose.position;
109,144c61,82
<   // unit vector of point 'start' to point 'end'
<   tf::Vector3 v((end.x - start.x), (end.y - start.y), 0);
<   tf::Vector3 unit_v = v.normalize();
< 
<   // normal unit vectors of v
<   // rotate to counter clockwise 90 degree
<   tf::Vector3 unit_w1 = rotateUnitVector(unit_v, 90);
<   // rotate to counter clockwise 90 degree
<   tf::Vector3 unit_w2 = rotateUnitVector(unit_v, -90);
< 
<   // the foot of a perpendicular line
<   geometry_msgs::Point h1;
<   h1.x = current_pose_.position.x + d * unit_w1.getX();
<   h1.y = current_pose_.position.y + d * unit_w1.getY();
<   h1.z = current_pose_.position.z;
< 
<   geometry_msgs::Point h2;
<   h2.x = current_pose_.position.x + d * unit_w2.getX();
<   h2.y = current_pose_.position.y + d * unit_w2.getY();
<   h2.z = current_pose_.position.z;
< 
<   // ROS_INFO("error : %lf", error);
<   // ROS_INFO("whether h1 on line : %lf", h1.y - (slope * h1.x + intercept));
<   // ROS_INFO("whether h2 on line : %lf", h2.y - (slope * h2.x + intercept));
< 
<   // check which of two foot of a perpendicular line is on the line equation
<   geometry_msgs::Point h;
<   if (fabs(a * h1.x + b * h1.y + c) < ERROR)
<   {
<     h = h1;
<     //   ROS_INFO("use h1");
<   }
<   else if (fabs(a * h2.x + b * h2.y + c) < ERROR)
<   {
<     //   ROS_INFO("use h2");
<     h = h2;
---
>   // project ego vehicle's current position at C onto the line at D in between two waypoints A and B.
>   tf::Vector3 p_A(start.x, start.y, 0.0);
>   tf::Vector3 p_B(end.x, end.y, 0.0);
>   tf::Vector3 p_C(current_pose_.position.x, current_pose_.position.y, 0.0);
>   tf::Vector3 AB = p_B - p_A;
>   tf::Vector3 AC = p_C - p_A;
>   tf::Vector3 p_D = p_A + AC.dot(AB) / AB.dot(AB) * AB;
>   double dist_CD = (p_D - p_C).length();
> 
>   bool found = false;
>   tf::Vector3 final_goal;
>   // Draw a circle centered at p_C with a radius of search_radius
>   if (dist_CD > search_radius)
>   {
>     // no intersection in between the circle and AB
>     found = false;
>   }
>   else if (dist_CD == search_radius)
>   {
>     // one intersection
>     final_goal = p_D;
>     found = true;
148,160c86
<     return false;
<   }
< 
<   // get intersection[s]
<   // if there is a intersection
<   if (d == search_radius)
<   {
<     *next_target = h;
<     return true;
<   }
<   else
<   {
<     // if there are two intersection
---
>     // two intersections
162,179c88,93
<     double s = sqrt(pow(search_radius, 2) - pow(d, 2));
<     geometry_msgs::Point target1;
<     target1.x = h.x + s * unit_v.getX();
<     target1.y = h.y + s * unit_v.getY();
<     target1.z = current_pose_.position.z;
< 
<     geometry_msgs::Point target2;
<     target2.x = h.x - s * unit_v.getX();
<     target2.y = h.y - s * unit_v.getY();
<     target2.z = current_pose_.position.z;
< 
<     // ROS_INFO("target1 : ( %lf , %lf , %lf)", target1.x, target1.y, target1.z);
<     // ROS_INFO("target2 : ( %lf , %lf , %lf)", target2.x, target2.y, target2.z);
<     // displayLinePoint(a, b, c, target1, target2, h);  // debug tool
< 
<     // check intersection is between end and start
<     double interval = getPlaneDistance(end, start);
<     if (getPlaneDistance(target1, end) < interval)
---
>     double s = sqrt(pow(search_radius, 2) - pow(dist_CD, 2));
>     tf::Vector3 p_E = p_D + s * AB.normalized();
>     tf::Vector3 p_F = p_D - s * AB.normalized();
> 
>     // verify whether these two points lie on line segment AB
>     if ((p_B - p_E).length2() < AB.length2())
181,183c95,96
<       // ROS_INFO("result : target1");
<       *next_target = target1;
<       return true;
---
>       final_goal = p_E;
>       found = true;
185c98
<     else if (getPlaneDistance(target2, end) < interval)
---
>     else if ((p_B - p_F).length2() < AB.length2())
187,189c100,101
<       // ROS_INFO("result : target2");
<       *next_target = target2;
<       return true;
---
>       final_goal = p_F;
>       found = true;
193,194c105
<       // ROS_INFO("result : false ");
<       return false;
---
>       found = false;
196a108,116
> 
>   if (found)
>   {
>     next_target->x = final_goal.x();
>     next_target->y = final_goal.y();
>     next_target->z = current_pose_.position.z;
>   }
> 
>   return found;
270,272c190,191
<   // linear interpolation and calculate angular velocity
<   bool interpolation =
<     interpolateNextTarget(next_waypoint_number_, &next_target_position_);
---
>   // linear interpolation
>   bool interpolation = interpolateNextTarget(next_waypoint_number_, &next_target_position_);
276c195
<     ROS_INFO_STREAM("lost target! ");
---
>     ROS_INFO("lost target!");
